/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package esmska.gui;

import esmska.data.Temp;
import esmska.data.Template;
import esmska.data.event.ValuedEventSupport;
import esmska.data.event.ValuedListener;
import esmska.utils.L10N;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.AbstractListModel;
import javax.swing.Action;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
/**
 *
 * @author Mizerovi16
 */
public class AddTemplateFrame extends javax.swing.JFrame {
    public static enum Events {
        INSERT_TEMPLATE;
    }
    
    private static final ResourceBundle l10n = L10N.l10nBundle;
    private static final Logger logger = Logger.getLogger(AddTemplateFrame.class.getName());
    private Template templates = Template.getInstance();
    private TemplateModel templateModel = new TemplateModel();
    private Action insertTemplateAction = new InsertTemplateAction();
    private Temp selectedTemplate;
        
        // <editor-fold defaultstate="collapsed" desc="ValuedEvent support">
    private ValuedEventSupport<Events, Temp> valuedSupport = new ValuedEventSupport<Events, Temp>(this);
    public void addValuedListener(ValuedListener<Events, Temp> valuedListener) {
        valuedSupport.addValuedListener(valuedListener);
    }
    public void removeValuedListener(ValuedListener<Events, Temp> valuedListener) {
        valuedSupport.removeValuedListener(valuedListener);
    }
    // </editor-fold>
               
    /**
     * Creates new form TemplateFrame
     */
    public AddTemplateFrame() {
        initComponents();       
        //select first row
        if (templateModel.getSize() > 0) {
            templateList.getSelectionModel().setSelectionInterval(0, 0);
        }
        templates.addActionListener(new TemplateActionListener());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        templateLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        templateList = new javax.swing.JList();
        addTemplateButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(l10n.getString( "AddTemplateFrame.title")); // NOI18N

        templateLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(templateLabel, l10n.getString( "AddTemplateFrame.templateLabel.text")); // NOI18N

        templateList.setModel(templateModel);
        templateList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        templateList.getSelectionModel().addListSelectionListener(new TemplateListListener());
        jScrollPane1.setViewportView(templateList);

        addTemplateButton.setAction(insertTemplateAction);
        addTemplateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/esmska/resources/add-22.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(addTemplateButton, l10n.getString( "AddTemplateFrame.addTemplateButton.text")); // NOI18N
        addTemplateButton.setMaximumSize(new java.awt.Dimension(125, 31));
        addTemplateButton.setMinimumSize(new java.awt.Dimension(125, 31));
        addTemplateButton.setPreferredSize(new java.awt.Dimension(125, 31));

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/esmska/resources/close-22.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(closeButton, l10n.getString( "Close_")); // NOI18N
        closeButton.setToolTipText(l10n.getString( "AddTemplateFrame.closeButton.toolTipText")); // NOI18N
        closeButton.setMaximumSize(new java.awt.Dimension(125, 31));
        closeButton.setMinimumSize(new java.awt.Dimension(125, 31));
        closeButton.setPreferredSize(new java.awt.Dimension(125, 31));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addTemplateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(templateLabel))
                        .addGap(145, 145, 145)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(templateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTemplateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    /** clear selection of template list */
    public void clearSelection() {
        templateList.clearSelection();
    }
    
    private class InsertTemplateAction extends AbstractAction {
        public InsertTemplateAction() {
        }
        @Override
        public void actionPerformed(ActionEvent e) {
            if (selectedTemplate == null) {
                return;
            }
            logger.fine("Forwarding text from template: " + selectedTemplate);
            //fire event and close
            valuedSupport.fireEventOccured(Events.INSERT_TEMPLATE, selectedTemplate);
            closeButton.doClick(0);
        }
    }
    
    /** Listener for template changes */
    private class TemplateActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            templateList.getSelectionModel().clearSelection();
        }
    }
    
    /** Listener for changes in template list */
    private class TemplateListListener implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if  (e.getValueIsAdjusting()) {
                return;
            }
            int index = templateList.getSelectedIndex();
            boolean selected = (index >= 0);
            insertTemplateAction.setEnabled(selected);

            Temp temp = null;
            if (selected) {
                index = templateList.getSelectedIndex();
                temp = templates.getTemplate(index);
            }            
            selectedTemplate = temp;
        }
    }
   
    private class TemplateModel extends AbstractListModel {
        private int oldSize = getSize();
        public TemplateModel() { 
         //listen for changes in templates and fire events accordingly
            templates.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    switch (e.getID()) {
                        case Template.ACTION_ADD_TEMPLATE:
                        case Template.ACTION_CHANGE_TEMPLATE:
                                fireContentsChanged(this, 0, getSize());
                            break;
                        case Template.ACTION_REMOVE_TEMPLATE:
                        case Template.ACTION_CLEAR_TEMPLATES:
                            fireIntervalRemoved(this, 0, oldSize);
                            break;
                        default:
                            logger.warning("Unknown action event type");
                            assert false : "Unknown action event type";
                    }
                    oldSize = getSize();
                    }
                });
            }
        
        @Override
        public int getSize() {
            return templates.getTemplates().size();
        }
        @Override
        public Object getElementAt(int index) {
            return templates.getTemplate(index);           
        }        
    }   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTemplateButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel templateLabel;
    private javax.swing.JList templateList;
    // End of variables declaration//GEN-END:variables
}
