
function getName() {
    return "[CZ]Vodafone"
}

function getVersion() {
    return "2014-06-01"
}

function getMaintainer() {
    return "Kamil Páral <kamil.paral@gmail.com>"
}

function getMinProgramVersion() {
    return "1.6.99.4"
}

function getWebsite() {
    return "https://park.vodafone.cz"
}

function getDescription() {
    return "Oficiální brána Vodafone určená pro neregistrované uživatele. Zdarma odesílá zprávy do sítě Vodafone, vyžaduje však opsání bezpečnostního kódu a je omezena délka zprávy."
}

function getSupportedPrefixes() {
    return ["+420"]
}

function getPreferredPrefixes() {
    return ["+420608","+420773","+420774","+420775","+420776","+420777"]
}

function getSMSLength() {
    return 160
}

function getMaxChars() {
    return 160
}

function getDelayBetweenMessages() {
    // the gateway states 30 sec, but it does not enforce apart from UI 
    // (some programmers are pigs); let's just ignore them
    return 0
}

function getSupportedLanguages() {
    return ['cs']
}

function getFeatures() {
    return ["CAPTCHA",
            "SENDER_NUMBER"]
}

function send() {
    // check whether there is a supplied sender number
    if (SENDERNUMBER.length == 0) {
        EXEC.setProblem("SIGNATURE_NEEDED")
        return false
    }
    // sender number must start with +420
    if (SENDERNUMBER.indexOf("+420") != 0) {
        msg = "Číslo odesilatele musí pocházet z České republiky \
(začínat na +420). Aktuální číslo odesilatele: " + SENDERNUMBER
        EXEC.setProblem("CUSTOM_MESSAGE", msg)
        return false
    }

    // start page
    content = EXEC.getURL("https://park.vodafone.cz/", [])
    
    // go to the link "Poslat SMS"
    re = /onclick="\$.*wicketAjaxGet\('.*\?x=([^']+)'/
    match = re.exec(content)
    var urlid = match[1]
    content = EXEC.getURL("https://park.vodafone.cz/", ['x', urlid])

    // == compute proof:field ==
    re = /<script type="text\/javascript">(for\(var a=eval,b=.*?)a\(b\);<\/script>/
    match = re.exec(content)
    script = match[1]
    eval(script)
    // 'b' now contains the de-obfuscated code
    // we need to replace css selectors with color values
    b = stripCSSselectors(b, content)
    // we need to evaluate all of 'b' except for the last value assignment
    separator = b.indexOf("$(\"#")
    functions = b.substring(0, separator)
    eval(functions)
    // the remnant of 'b' is the assignment we need
    assignment = b.substring(separator)
    re = /\$\(".+?"\).val\((.*)\);/
    match = re.exec(assignment)
    value = match[1]
    // now compute the final proof code
    proof = eval(value)
    // =========================
        
    // extract important variables
    re = /<img alt="" id="id\w+" src="\.\.\/\?x=(.+)&amp;random=(.+)" title/
    match = re.exec(content)
    captcha_par1 = match[1]
    captcha_par2 = match[2]
    
    re = /'\.\.\/\?x=(.+?)', 'sendButton'/
    match = re.exec(content)
    form_par1 = match[1]
    
    // download image
    EXEC.setReferer("https://park.vodafone.cz/egw/.0")
    getData = ["x", captcha_par1, "random", captcha_par2]
    content = EXEC.getURL("https://park.vodafone.cz/", getData)

    // show image
    var captcha = EXEC.recognizeImage(content, "")
    
    // server returns HTTP 500 Internal Server Error if we send empty captcha
    // if user cancelled captcha resolving (and returned us empty catpcha code),
    // let's inform him right away
    if (captcha.length() == 0) {
        EXEC.setProblem("WRONG_CODE")
        return false
    }

    // send message
    getData = ["x", form_par1]
    postData = ["recipients:recipientInput", NUMBER,
                "senderMsisdn", SENDERNUMBER,
                "text", MESSAGE,
                "captcha:password", captcha,
                "id7_hf_0", "",
                //this is computed by CSS selectors, but fortunatelly always the same
                "proof:field", proof,
                "sendButton", "1"]
    try {
        content = EXEC.postURL("https://park.vodafone.cz/", getData, postData)
    } catch(exc) {
        // Vodafone server with throw HTTP 500 Internal Server Error on invalid
        // data (like invalid sender number, invalid recipient number, empty text).
        // If we receive an exception, it almost certainly means some invalid input,
        // but we don't know which one. We probably don't have better solution 
        // than to tell this to the user.
        EXEC.setProblem("NO_REASON")
        return false
    }

    // check if message was successfully sent
    re = /Zpráva byla úspěšně odeslána/
    match = re.exec(content)
    if (match) {
        // all ok
        return true
    }
    
    // look for possible error messages
    re = /<label class="errorlevel error".*?>(.+)<\/label>/
    match = re.exec(content)
    if (match) {
        // gateway told us what's wrong
        EXEC.setProblem("GATEWAY_MESSAGE", match[1])
        return false
    }
    
    // neither success nor error message was found
    return false
}

// transform hex color notation to css selectors color output
function hex2rgb(hex) {
    function hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)}
    function hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)}
    function hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)}
    function cutHex(h) {return (h.charAt(0)=="#") ? h.substring(1,7):h}

    R = hexToR(hex);
    G = hexToG(hex);
    B = hexToB(hex);

    return "rgb(" + R + ", " + G + ", " + B + ")"
}

// in the code (to be evaluated later) replace $(var).css("color") with the
// real variable color extracted from the page source
function stripCSSselectors(code, page_source) {
    re = /\$\("([^\"]+?)"\)\.css\("color"\)/g
    while ((match = re.exec(code)) != null) {
        // find out the value
        name = match[1]
        re2 = new RegExp(name + "\\{color:(#\\w{6});")
        match2 = re2.exec(page_source)
        color = match2[1]
        color = hex2rgb(color)
        // replace the selector
        code = code.replace("$(\"" + name + "\").css(\"color\")", "\"" + color + "\"")
    }
    return code
}
